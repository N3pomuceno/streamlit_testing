import logging
import random
import re
from datetime import datetime

import pandas as pd
import streamlit as st

import src.util as util
from src.util_texts import RELEVANT_INFO

logging.basicConfig(
    format="%(asctime)s %(levelname)s [%(filename)s]:%(lineno)d - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# import io
# import os

HOST = st.secrets["HOST"]
PORT = st.secrets["PORT"]
APP_SECRET_GMAIL = st.secrets["APP_SECRET_UFF_MAIL"]
APP_SECRET_GMAIL_PASSWORD = st.secrets["APP_SECRET_UFF_PASSWORD"]
APP_SECRET_UFF_RECEIVER = st.secrets["APP_SECRET_UFF_RECEIVER"]
CSV_FILE_ORIGIN = st.secrets["CSV_FILE_ORIGIN"]
form_extent = RELEVANT_INFO["form_extent"]


def init_session_state_var(key, default_value):
    """
    Inicializa uma vari√°vel de estado da sess√£o se ela n√£o existir.
    """
    # logger.info("Inicializando vari√°vel de estado da sess√£o: {}".format(key))
    if key not in st.session_state:
        st.session_state[key] = default_value


# Config Session States
def set_session_state():
    """
    Inicia as vari√°veis de estado da sess√£o.
    """
    # Valida e-mail
    if "check_email" not in st.session_state:
        if util.check_login(APP_SECRET_GMAIL, APP_SECRET_GMAIL_PASSWORD, HOST, PORT):
            st.session_state.check_email = True
        else:
            raise Exception(
                "Erro ao validar o email, por favor entrar em contato com o administrador do sistema."
            )
    # Define um ID √∫nico para a sess√£o
    init_session_state_var(
        "id",
        "{}-{}".format(
            str(random.randint(0, 1000000)).zfill(6),
            datetime.now().strftime("%d_%m_%Y_%H%M"),
        ),
    )
    # Define a quantidade de modelos e de fatos relevantes baseado no nome do arquivo CSV
    init_session_state_var(
        "n_models", int(CSV_FILE_ORIGIN.split("/")[1].split("_")[0][1:])
    )
    init_session_state_var("n_fr", int(CSV_FILE_ORIGIN.split("/")[1].split("_")[1][2:]))

    # Define ordens de est√°gio da atividade, da quantidade de modelos e de fatos relevantes respectivamente
    init_session_state_var("order", 0)
    init_session_state_var("page_order", 0)
    init_session_state_var("fr_order", 0)

    # Define uma lista com a ordem de modelos que ser√£o apresentados e um dicion√°rio com as an√°lises
    init_session_state_var("fr_model_order", [])
    init_session_state_var("analises", {})

    # Define o estado da avalia√ß√£o para o caso de analisar em dupla
    init_session_state_var("most_liked_analysis_defined", False)
    init_session_state_var("most_liked_order", "")

    # Define o estado da avalia√ß√£o para o caso de avaliar em gr√£o mais fino.
    init_session_state_var("extent", False)

    # Define o estado do formul√°rio e tamb√©m o estado das quest√µes.
    init_session_state_var("form_submitted", False)
    init_session_state_var("most_liked", None)
    return None


set_session_state()


# Fun√ß√£o para carregar os textos a partir de um CSV
@st.cache_data
def load_df():
    """
    Retorna um DataFrame a partir de um arquivo CSV.
    O arquivo CSV deve conter as colunas 'generator_model', 'generated_text' e 'human_ref'.
    """
    return pd.read_csv(CSV_FILE_ORIGIN)


# Configurar o modo wide
def set_page_config():
    # logger.info("Configurando o layout da p√°gina")
    st.set_page_config(layout="wide", page_title="Avalia√ß√£o LLM", page_icon="ü§ñ")


# Fun√ß√£o para selecionar os textos a serem exibidos
def select_texts(analises_dict, analises_order):
    keys = analises_order[:2]
    return analises_dict[keys[0]], analises_dict[keys[1]]


# Fun√ß√£o para avan√ßar para a pr√≥xima p√°gina
def next_page():
    st.session_state.order += 1
    return None


# Callback do bot√£o ‚Äî s√≥ marca que o bot√£o foi clicado do formul√°rio.
def form_callback():
    st.session_state["form_submitted"] = True


def load_data():
    # logger.info(
    #     "Carregando dados do CSV e definindo os dados tempor√°rios por ordem, fato relevante atual: {}".format(
    #         st.session_state.fr_order
    #     )
    # )
    # Carrega o CSV e define o fato relevante
    df = load_df()
    df_temp = df[df["new_id"] == st.session_state.fr_order]

    # Carrega os textos, cria dicion√°rio para manter informa√ß√µes conectadas, e lista para definir ordem de aparecimento.
    if len(st.session_state.analises) == 0:
        for _, row in df_temp.iterrows():
            st.session_state.analises[row["generator_model"]] = row["generated_text"]
        st.session_state.analises["human_ref"] = df_temp["human_ref"].iloc[0]
        logger.info(
            "Novas an√°lises definidas: {}".format(st.session_state.analises.keys())
        )

    # Define uma lista com ordem dos modelos baseado na coluna total_rank e por √∫ltimo o humano
    if len(st.session_state.fr_model_order) == 0:
        order = list(df_temp["generator_model"].unique())
        order.reverse()
        order.append("human_ref")
        st.session_state.fr_model_order = order
        logger.info("Nova ordem estabelecida: {}".format(order))

    # Define o Fato Relevante que ser√° apresentado
    st.session_state["material_fact"] = df_temp["material fact"].iloc[0]

    return None


def remover_elementos_markdown(texto_markdown):
    """
    Remove cabe√ßalhos Markdown, negrito, cabe√ßalhos <> e linhas
    que cont√™m apenas texto em negrito.

    Args:
        texto_markdown: Uma string contendo o texto em Markdown.

    Returns:
        Uma string com os elementos especificados removidos.
    """

    # 1. Remover cabe√ßalhos segmentados por <>
    texto_processado = re.sub(r"<[^>]+>", "", texto_markdown)

    # 2. Remover linhas que cont√™m APENAS negrito (e poss√≠veis espa√ßos)
    # Procura por linhas que:
    #   ^        - come√ßam no in√≠cio da linha
    #   \s* - podem ter espa√ßos em branco
    #   \*\*.*?\*\* - cont√™m texto em negrito (**)
    #   \s* - podem ter espa√ßos em branco depois
    #   $        - terminam no fim da linha
    # Substitui a linha inteira por uma string vazia. Usa re.MULTILINE.
    texto_processado = re.sub(
        r"^\s*\*\*(.*?)\*\*\s*$", "", texto_processado, flags=re.MULTILINE
    )
    # Faz o mesmo para o negrito com __ (underscore)
    texto_processado = re.sub(
        r"^\s*__(.*?)__\s*$", "", texto_processado, flags=re.MULTILINE
    )

    # 3. Remover formata√ß√£o de negrito restante (em linhas com outro texto)
    # Agora, remove apenas os marcadores de negrito das linhas que sobraram.
    texto_processado = re.sub(r"\*\*(.*?)\*\*", r"\1", texto_processado)
    texto_processado = re.sub(r"__(.*?)__", r"\1", texto_processado)

    # 4. Remover cabe√ßalhos padr√£o (#, ##, etc.)
    texto_processado = re.sub(r"^#+\s+.*$", "", texto_processado, flags=re.MULTILINE)

    # 5. Limpar linhas em branco excessivas
    # Remove linhas que ficaram completamente vazias ou s√≥ com espa√ßos.
    texto_processado = re.sub(r"^\s*$", "", texto_processado, flags=re.MULTILINE)
    # Garante que n√£o haja mais de duas quebras de linha seguidas.
    texto_processado = re.sub(r"\n{3,}", "\n\n", texto_processado)
    # Remove espa√ßos em branco no in√≠cio e fim.
    texto_processado = texto_processado.strip()

    return texto_processado


def caracteristicas_texto(key: str) -> dict:
    """
    Fun√ß√£o da interface que mostrar√° as checkboxes para o usu√°rio avaliar os textos.
    """
    resposta = {}
    # Cria as checkboxes para o usu√°rio avaliar os textos
    st.markdown(
        """
        ## Em quais aspectos esse texto se destaca? 
        Lembre-se que se deixar todos os campos em branco, implicar√° dizer que o texto n√£o se destaca em nenhum aspecto."""
    )
    resposta["factuality"] = st.checkbox(
        "Factualidade",
        key="factuality_{}".format(key),
        help="As informa√ß√µes fornecidas pelo texto s√£o verdadeiras e baseadas em fatos verific√°veis, mesmo que n√£o tenham sido citados no fato relevante? Um texto que apresenta dados falsos ou distorcidos tem baixa factualidade. Caso as informa√ß√µes tenham sido inventadas (ou alucinadas) a factualidade √© baixa.",
    )
    resposta["usefulness"] = st.checkbox(
        "Utilidade",
        key="usefulness_{}".format(key),
        help="Quanto o texto √© √∫til, informativo e contribui de forma concreta para o entendimento ou a tomada de decis√£o? Um conte√∫do com alta utilidade apresenta informa√ß√µes espec√≠ficas, relevantes e com valor agregado. Um relat√≥rio que apresenta dados objetivos, an√°lises detalhadas e implica√ß√µes diretas para os acionistas demonstra alta utilidade. Um relat√≥rio que traz apenas opini√µes vagas, frases gen√©ricas ou observa√ß√µes evidentes (como ‚Äúa empresa busca sempre crescer‚Äù) tem baixa utilidade. De maneira geral, qual an√°lise voc√™ considera mais √∫til para a tomada de decis√µes?",
    )
    resposta["simplicity"] = st.checkbox(
        "Simplicidade",
        key="simplicity_{}".format(key),
        help="Um texto simples cont√©m linguagem acess√≠vel e clara, evitando termos t√©cnicos ou explicando-os quando necess√°rios, de modo que qualquer leitor, mesmo sem forma√ß√£o na √°rea econ√¥mica, consiga compreender as informa√ß√µes e argumentos apresentados.",
    )
    resposta["objectivity"] = st.checkbox(
        "Objetividade",
        key="objectivity_{}".format(key),
        help="O texto apresenta informa√ß√µes e argumentos de forma clara, direta e fundamentada, evitando opini√µes vagas? Evita ju√≠zos de valor infundados, termos sensacionalistas ou especula√ß√µes sem base? Acrescenta uma camada anal√≠tica, oferecendo interpreta√ß√µes consistentes e bem embasadas, com base em indicadores, cen√°rios econ√¥micos ou tend√™ncias de mercado?  Ou limita-se a reproduzir os fatos reportados no fato relevante, mesmo que o fa√ßa de forma explicativa e clara?",
    )
    resposta["confiability"] = st.checkbox(
        "Confiabilidade/Parcialidade",
        key="confiability_{}".format(key),
        help="O texto apresenta dados e fatos de forma neutra, contextualizando-os corretamente e sem distor√ß√µes? Menciona fontes confi√°veis (relat√≥rios oficiais, indicadores econ√¥micos, declara√ß√µes verific√°veis)? Evita vi√©s pol√≠tico, ideol√≥gico ou institucional que possa comprometer a an√°lise? N√£o omite informa√ß√µes relevantes que poderiam alterar a compreens√£o do leitor sobre o tema?",
    )

    resposta["reason"] = st.text_input(
        "Quais √© o motivo para voc√™ definir esses aspectos?",
        key="reason_{}".format(key),
    )
    return resposta


if st.session_state["form_submitted"]:
    st.session_state.page_order += 1

    # Prepara para pr√≥xima p√°gina
    if (
        len(st.session_state.fr_model_order) != 1
        and not st.session_state.most_liked_analysis_defined
    ):
        logger.info("Resposta = {}".format(st.session_state.most_liked))
        if st.session_state.most_liked == "An√°lise A":
            indice = 1
        elif st.session_state.most_liked == "An√°lise B":
            indice = 0

        # Ordem os textos de acordo com a avalia√ß√£o do usu√°rio
        st.session_state.most_liked_order = "{} > {}".format(
            st.session_state.most_liked_order, st.session_state.fr_model_order[indice]
        )
    else:
        indice = 0

    if len(st.session_state.fr_model_order) == 1 and st.session_state.extent:
        novo_dado = {
            "id": [st.session_state.id],
            "text": [st.session_state.analises[st.session_state.fr_model_order[0]]],
            "material_fact": [st.session_state.material_fact],
            "generator_model": st.session_state.fr_model_order[0],
            "factuality": [
                "Se destaca"
                if st.session_state["factuality_{}".format(st.session_state.fr_order)]
                else "N√£o se destaca"
            ],
            "usefulness": [
                "Se destaca"
                if st.session_state["usefulness_{}".format(st.session_state.fr_order)]
                else "N√£o se destaca"
            ],
            "simplicity": [
                "Se destaca"
                if st.session_state["simplicity_{}".format(st.session_state.fr_order)]
                else "N√£o se destaca"
            ],
            "objectivity": [
                "Se destaca"
                if st.session_state["objectivity_{}".format(st.session_state.fr_order)]
                else "N√£o se destaca"
            ],
            "confiability": [
                "Se destaca"
                if st.session_state["confiability_{}".format(st.session_state.fr_order)]
                else "N√£o se destaca"
            ],
            "reason": [st.session_state["reason_{}".format(st.session_state.fr_order)]],
            "most_liked_order": [st.session_state.most_liked_order],
        }

        df_answer = pd.DataFrame(novo_dado)

        # Converter para CSV em mem√≥ria
        csv_content = util.dataframe_para_csv(df_answer)

        util.send_email(
            usn=APP_SECRET_GMAIL,
            pwd=APP_SECRET_GMAIL_PASSWORD,
            sbj="Avalia√ß√£o LLM: {} - {}/{}".format(
                st.session_state.id,
                st.session_state.fr_order + 1,
                st.session_state.n_fr,
            ),
            to=APP_SECRET_UFF_RECEIVER,
            body="Avalia√ß√£o LLM: \n Gr√£o fino: {} \n Modelo Gerador: {} \n Ordem que mais gostou: {}".format(
                st.session_state.extent,
                st.session_state.fr_model_order[0],
                st.session_state.most_liked_order,
            ),
            csv_content=csv_content,
            filename="data.csv",
            host=HOST,
            port=PORT,
        )
    # Retira o outro texto da lista
    st.session_state.analises.pop(st.session_state.fr_model_order[indice])
    st.session_state.fr_model_order.pop(indice)
    # Caso sobre somente uma √∫ltima an√°lise, define a an√°lise mais gostada
    if len(st.session_state.fr_model_order) == 1:
        st.session_state.most_liked_analysis_defined = True
        st.session_state.most_liked_order = "{} > {}".format(
            st.session_state.most_liked_order, st.session_state.fr_model_order[0]
        )
        if not st.session_state.extent:
            util.send_email(
                usn=APP_SECRET_GMAIL,
                pwd=APP_SECRET_GMAIL_PASSWORD,
                sbj="Avalia√ß√£o LLM: {} - {}/{}".format(
                    st.session_state.id,
                    st.session_state.fr_order + 1,
                    st.session_state.n_fr,
                ),
                to=APP_SECRET_UFF_RECEIVER,
                body="Avalia√ß√£o LLM: \n Gr√£o fino: {} \n Modelo Gerador: {} \n Ordem que mais gostou: {}".format(
                    "Comparativo Simples",
                    st.session_state.fr_model_order[0],
                    st.session_state.most_liked_order,
                ),
                host=HOST,
                port=PORT,
            )
            st.session_state.analises.pop(st.session_state.fr_model_order[0])
            st.session_state.fr_model_order.pop()
    if len(st.session_state.fr_model_order) == 0:
        st.session_state.most_liked_analysis_defined = False
        st.session_state.most_liked_order = ""
        st.session_state.fr_order += 1
        st.session_state.analises = {}
    st.session_state["form_submitted"] = False


def show_interface():
    # T√≠tulo
    st.title("Avalia√ß√£o LLM ü§ñ")

    if st.session_state.order == 0:
        st.markdown("""
                    ### Bem-vindo(a)!

        Esse formul√°rio √© parte de uma pesquisa cient√≠fica para entender a qualidade de an√°lises de documentos financeiros geradas por intelig√™ncia artificial.

        Este formul√°rio tem como objetivo coletar avalia√ß√µes de diferentes an√°lises sobre documentos financeiros espec√≠ficos. A sua participa√ß√£o √© fundamental para compreendermos a percep√ß√£o sobre a qualidade das an√°lises produzidas com base em crit√©rios como flu√™ncia textual, factualidade e coer√™ncia argumentativa, entre outros.
        Para nos ajudar nessa pesquisa, voc√™, que j√° tem familiaridade com esse tipo de conte√∫do, vai avaliar duas an√°lises sobre o mesmo documento.

        Voc√™ poder√° escolher entre dois formatos de avalia√ß√£o:

        #### **Avalia√ß√£o Comparativa Simples**

        Nesta op√ß√£o, voc√™ ir√° ler um ‚Äúfato relevante‚Äù e, em seguida, comparar duasas an√°lises dispon√≠veis sobre este fato. Ent√£o, voc√™ ir√° e escolher a melhor an√°liseaquela que mais se destaca em sua opini√£o. Em seguida, voc√™ far√° uma avalia√ß√£o detalhada apenas dessa an√°lise escolhida.

        #### **Avalia√ß√£o Detalhada de Todas as An√°lises**

        Ao optar por participar da avalia√ß√£o detalhada, al√©m de escolher a melhor an√°lise, voc√™ ir√° detalhar porqu√™ escolheu determinada an√°lise. Aqui voc√™ poder√° avaliar crit√©rios como 
        Nesta op√ß√£o, voc√™ realizar√° uma avalia√ß√£o individual e aprofundada de todas as an√°lises dispon√≠veis, atribuindo notas ou coment√°rios sobre aspectos como flu√™ncia e, precis√£o dos dados, tamb√©m poder√° incluir seu pr√≥prio crit√©rioestrutura argumentativa, entre outros.Ao Para escolher essa op√ß√£o, voc√™ deve estar ciente de que a avalia√ß√£o ser√° mais extensa e exigir√° mais tempo. Voc√™ estar√° ajudando n√£o apenas a entender a habilidade de intelig√™ncias artificias para o dom√≠nio financeiro, mas tamb√©m estar√° indicando o que precisamos melhorar. Caso tenha interesse nela, basta marcar a op√ß√£o abaixo.

        ##### ‚ö†Ô∏è A escolha do formato de avalia√ß√£o impacta na quantidade de horas complementares que ser√£o atribu√≠das!

        Escolha o formato que melhor se encaixa na sua disponibilidade e interesse. Em qualquer dos casos, sua participa√ß√£o √© muito valiosa para o projeto.
                    """)
        st.session_state.extent = st.checkbox("Avalia√ß√£o Detalhada", value=False)
        st.button("Avan√ßar", key="button1", on_click=next_page)
    elif st.session_state.n_fr == st.session_state.fr_model_order:  # Last Page
        st.markdown(
            """
        ‚úÖ Avalia√ß√£o Conclu√≠da!

        Agradecemos a sua participa√ß√£o!

        Sua avalia√ß√£o foi registrada com sucesso. Valorizamos sua contribui√ß√£ocom a an√°lise cr√≠tica das interpreta√ß√µes de documentos financeiros ‚Äî sua colabora√ß√£o √© essencial para o desenvolvimento de iniciativas acad√™micas e de pesquisa na √°rea.

            """
        )
    else:
        fr = st.session_state.material_fact
        fr = fr.replace("$", r"\$")
        # Instru√ß√µes da Atividade
        st.markdown(
            """
            ### Bem-vindo!

            ###### Este aplicativo tem como objetivo avaliar a qualidade das an√°lises apresentadas com base em um fato relevante.

            ##### ‚úÖ Siga os passos abaixo:

            Leia o fato relevante apresentado abaixo.
            Ele √© a base para todas as an√°lises que voc√™ ver√° a seguir.

            Responda o formul√°rio ao final da p√°gina.
            O tipo de formul√°rio exibido depender√° do formato de avalia√ß√£o que voc√™ escolheu anteriormente.

            üïí Lembre-se de sempre responder os formul√°rios no final.
        """
        )

        # Progresso Visual para o usu√°rio.
        st.progress(
            (st.session_state.fr_order + 1) / st.session_state.n_fr,
            text="Fato Relevante: {}/{}".format(
                st.session_state.fr_order + 1, st.session_state.n_fr
            ),
        )

        # Fato Relevante para o usu√°rio Visualizar
        with st.expander("Fato Relevante", expanded=True):
            st.write(
                f"""
                {fr}
            """
            )

        logger.info(
            "{} - {}".format(
                st.session_state.extent, st.session_state.most_liked_analysis_defined
            )
        )

        if st.session_state.extent and st.session_state.most_liked_analysis_defined:
            # Avalia√ß√£o detalhada da √∫ltima an√°lise, a que o usu√°rio mais gostou.
            logger.info(
                "An√°lise detalhada: {}".format(st.session_state.fr_model_order[0])
            )
            texto = st.session_state.analises[st.session_state.fr_model_order[0]]
            texto = remover_elementos_markdown(texto)
            texto = (
                texto.replace("# ", "### ").replace("## ", "### ").replace("$", r"\$")
            )
            st.markdown(texto)

            # Formul√°rio para avalia√ß√£o
            st.markdown("## Avalia√ß√£o")
            with st.form("form_most_liked", clear_on_submit=True):
                caracteristicas_texto(st.session_state.fr_order)
                st.form_submit_button("Enviar", on_click=form_callback)
        else:
            # Avalia√ß√£o comparativa simples
            # Definir as duas an√°lises por ordem da lista
            logger.info("Hora da an√°lise: {}".format(st.session_state.fr_model_order))
            texto1, texto2 = select_texts(
                st.session_state.analises, st.session_state.fr_model_order
            )

            # Preparar textos e definir as colunas
            col1, col2 = st.columns(2)

            with col1:
                st.header("An√°lise A")
                texto1 = remover_elementos_markdown(texto1)
                texto1 = (
                    texto1.replace("# ", "### ")
                    .replace("## ", "### ")
                    .replace("$", r"\$")
                )
                st.markdown(texto1)
            with col2:
                st.header("An√°lise B")
                texto2 = remover_elementos_markdown(texto2)
                texto2 = (
                    texto2.replace("# ", "### ")
                    .replace("## ", "### ")
                    .replace("$", r"\$")
                )
                st.markdown(texto2)

            # Formul√°rio para avalia√ß√£o
            st.markdown("## Avalia√ß√£o")
            with st.form("form_most_liked", clear_on_submit=True):
                st.markdown("#### Qual an√°lise voc√™ mais gostou? (Selecione uma op√ß√£o)")
                st.pills(
                    "Selecione uma op√ß√£o",
                    options=["An√°lise A", "An√°lise B"],
                    key="most_liked",
                    label_visibility="collapsed",
                )
                st.form_submit_button("Enviar", on_click=form_callback)


def main():
    # Configura√ß√£o do Streamlit
    set_page_config()

    # Carregar dados
    load_data()

    # Execu√ß√£o do aplicativo
    show_interface()


if __name__ == "__main__":
    main()
