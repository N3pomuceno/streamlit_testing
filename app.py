import random
from datetime import datetime

import pandas as pd
import streamlit as st

import src.util as util
from src.util_texts import RELEVANT_INFO

# from src.logger import setup_logger

# import io
# import os

HOST = st.secrets["HOST"]
PORT = st.secrets["PORT"]
APP_SECRET_GMAIL = st.secrets["APP_SECRET_UFF_MAIL"]
APP_SECRET_GMAIL_PASSWORD = st.secrets["APP_SECRET_UFF_PASSWORD"]
APP_SECRET_UFF_RECEIVER = st.secrets[
    "APP_SECRET_TEST_RECEIVER"
]  # APP_SECRET_UFF_RECEIVER"]
CSV_FILE_ORIGIN = st.secrets["CSV_FILE_ORIGIN"]
form_extent = RELEVANT_INFO["form_extent"]
# logger = setup_logger("logs", "app.log", "INFO")


def init_session_state_var(key, default_value):
    """
    Inicializa uma vari√°vel de estado da sess√£o se ela n√£o existir.
    """
    # logger.info("Inicializando vari√°vel de estado da sess√£o: {}".format(key))
    if key not in st.session_state:
        st.session_state[key] = default_value


# Config Session States
def set_session_state():
    """
    Inicia as vari√°veis de estado da sess√£o.
    """
    # Valida e-mail
    if "check_email" not in st.session_state:
        if util.check_login(APP_SECRET_GMAIL, APP_SECRET_GMAIL_PASSWORD, HOST, PORT):
            st.session_state.check_email = True
        else:
            raise Exception(
                "Erro ao validar o email, por favor entrar em contato com o administrador do sistema."
            )
    # Define um ID √∫nico para a sess√£o
    init_session_state_var(
        "id",
        "{}-{}".format(
            str(random.randint(0, 1000000)).zfill(6),
            datetime.now().strftime("%d_%m_%Y_%H%M"),
        ),
    )
    # Define a quantidade de modelos e de fatos relevantes baseado no nome do arquivo CSV
    init_session_state_var(
        "n_models", int(CSV_FILE_ORIGIN.split("/")[1].split("_")[0][1:])
    )
    init_session_state_var("n_fr", int(CSV_FILE_ORIGIN.split("/")[1].split("_")[1][2:]))

    # Define ordens de est√°gio da atividade, da quantidade de modelos e de fatos relevantes respectivamente
    init_session_state_var("order", 0)
    init_session_state_var("page_order", 0)
    init_session_state_var("fr_order", 0)

    # Define uma lista com a ordem de modelos que ser√£o apresentados e um dicion√°rio com as an√°lises
    init_session_state_var("fr_model_order", [])
    init_session_state_var("analises", {})

    # Define o estado da avalia√ß√£o para o caso de analisar em dupla
    init_session_state_var("most_liked_analysis_defined", False)
    init_session_state_var("most_liked_order", "")

    # Define o estado da avalia√ß√£o para o caso de avaliar em gr√£o mais fino.
    init_session_state_var("extent", False)

    # Define o estado do formul√°rio e tamb√©m o estado das quest√µes.
    init_session_state_var("form_submitted", False)
    init_session_state_var("most_liked", None)
    return None


set_session_state()


# Fun√ß√£o para carregar os textos a partir de um CSV
@st.cache_data
def load_df():
    """
    Retorna um DataFrame a partir de um arquivo CSV.
    O arquivo CSV deve conter as colunas 'generator_model', 'generated_text' e 'human_ref'.
    """
    return pd.read_csv(CSV_FILE_ORIGIN)


# Configurar o modo wide
def set_page_config():
    # logger.info("Configurando o layout da p√°gina")
    st.set_page_config(layout="wide", page_title="Avalia√ß√£o LLM", page_icon="ü§ñ")


# Fun√ß√£o para selecionar os textos a serem exibidos
def select_texts(analises_dict, analises_order):
    keys = analises_order[:2]
    return analises_dict[keys[0]], analises_dict[keys[1]]


# Fun√ß√£o para avan√ßar para a pr√≥xima p√°gina
def next_page():
    st.session_state.order += 1
    return None


# Callback do bot√£o ‚Äî s√≥ marca que o bot√£o foi clicado do formul√°rio.
def form_callback():
    st.session_state["form_submitted"] = True


def load_data():
    # logger.info(
    #     "Carregando dados do CSV e definindo os dados tempor√°rios por ordem, fato relevante atual: {}".format(
    #         st.session_state.fr_order
    #     )
    # )
    # Carrega o CSV e define o fato relevante
    df = load_df()
    df_temp = df[df["new_id"] == st.session_state.fr_order]

    # Carrega os textos, cria dicion√°rio para manter informa√ß√µes conectadas, e lista para definir ordem de aparecimento.
    if len(st.session_state.analises) == 0:
        for _, row in df_temp.iterrows():
            st.session_state.analises[row["generator_model"]] = row["generated_text"]
        st.session_state.analises["human_ref"] = df_temp["human_ref"].iloc[0]
        print("Novas an√°lises definidas: {}".format(st.session_state.analises.keys()))

    # Define uma lista com ordem dos modelos baseado na coluna total_rank e por √∫ltimo o humano
    if len(st.session_state.fr_model_order) == 0:
        order = list(df_temp["generator_model"].unique())
        order.reverse()
        order.append("human_ref")
        st.session_state.fr_model_order = order
        print("Nova ordem estabelecida: {}".format(order))

    # Define o Fato Relevante que ser√° apresentado
    st.session_state["material_fact"] = df_temp["material fact"].iloc[0]

    return None


# TODO Alterar para alterar a lista de acordo com os fato relevantes forem sendo definidos.
if st.session_state["form_submitted"]:
    st.session_state.page_order += 1
    if st.session_state.extent or st.session_state.most_liked_analysis_defined:
        if len(st.session_state.fr_model_order) == 0:
            st.session_state.fr_order += 1
            st.session_state.page_order = 0
        else:
            st.session_state.fr_model_order.pop(0)

        if st.session_state.most_liked_analysis_defined:
            st.session_state.most_liked_analysis_defined = False
            st.session_state.most_liked_order = ""
    else:
        # Prepara para pr√≥xima p√°gina
        print("Resposta = {}".format(st.session_state.most_liked))
        if st.session_state.most_liked == "An√°lise A":
            indice = 1
        elif st.session_state.most_liked == "An√°lise B":
            indice = 0
        print("Excluindo modelo {}".format(st.session_state.fr_model_order[indice]))
        st.session_state.most_liked_order = "{} > {}".format(
            st.session_state.most_liked_order, st.session_state.fr_model_order[indice]
        )
        # Retira o outro texto da lista
        st.session_state.analises.pop(st.session_state.fr_model_order[indice])
        st.session_state.fr_model_order.pop(indice)
        print("Modelos Restantes: {}".format(st.session_state.fr_model_order))
        if len(st.session_state.fr_model_order) == 1:
            st.session_state.most_liked_analysis_defined = True
            print("Definindo a an√°lise mais gostada.")
    st.session_state["form_submitted"] = False


# Fun√ß√µes para mostrar as p√°ginas
def show_intro_page():
    pass


def show_finishing_page():
    pass


def show_comparing_page():
    pass


def show_evaluation_page():
    pass


def show_interface():
    # T√≠tulo
    st.title("Avalia√ß√£o LLM ü§ñ")

    if st.session_state.order == 0:
        show_intro_page()
        st.markdown("""
                    ### Bem-vindo(a)!

                    Este formul√°rio tem como objetivo coletar avalia√ß√µes de diferentes an√°lises sobre documentos financeiros espec√≠ficos. A sua participa√ß√£o √© fundamental para compreendermos a percep√ß√£o sobre a qualidade das an√°lises produzidas com base em crit√©rios como flu√™ncia textual, factualidade e coer√™ncia argumentativa entre outros.

                    Voc√™ poder√° escolher entre dois formatos de avalia√ß√£o:

                    #### **Avalia√ß√£o Comparativa Simples**

                    Nesta op√ß√£o, voc√™ ir√° comparar as an√°lises dispon√≠veis e escolher aquela que mais se destaca em sua opini√£o. Em seguida, voc√™ far√° uma avalia√ß√£o detalhada apenas dessa an√°lise escolhida.

                    #### **Avalia√ß√£o Detalhada de Todas as An√°lises**

                    Nesta op√ß√£o, voc√™ realizar√° uma avalia√ß√£o individual e aprofundada de todas as an√°lises dispon√≠veis, atribuindo notas ou coment√°rios sobre aspectos como flu√™ncia, precis√£o dos dados, estrutura argumentativa, entre outros. Para escolher essa op√ß√£o, voc√™ deve estar ciente de que a avalia√ß√£o ser√° mais extensa e exigir√° mais tempo. Caso tenha interesse nela, basta marcar a op√ß√£o abaixo.

                    ##### ‚ö†Ô∏è A escolha do formato de avalia√ß√£o impacta na quantidade de horas complementares que ser√£o atribu√≠das!

                    Escolha o formato que melhor se encaixa na sua disponibilidade e interesse. Em qualquer dos casos, sua participa√ß√£o √© muito valiosa para o projeto.
                    
                    ---
                    """)
        st.session_state.extent = st.checkbox("Avalia√ß√£o Detalhada", value=False)
        st.button("Avan√ßar", key="button1", on_click=next_page)
    elif st.session_state.n_fr == st.session_state.fr_model_order:  # Last Page
        show_finishing_page()
        st.markdown(
            """
            ‚úÖ Avalia√ß√£o Conclu√≠da!

            Obrigado pela sua participa√ß√£o!

            Sua avalia√ß√£o foi registrada com sucesso. Agradecemos por contribuir com a an√°lise cr√≠tica das interpreta√ß√µes de documentos financeiros ‚Äî sua colabora√ß√£o √© essencial para o desenvolvimento de iniciativas acad√™micas e de pesquisa na √°rea.
            """
        )
    else:
        fr = st.session_state.material_fact
        fr = fr.replace("$", r"\$")
        # Instru√ß√µes da Atividade
        st.markdown(
            """
        ### Bem-vindo!

        ###### Este aplicativo tem como objetivo avaliar a qualidade das an√°lises apresentadas com base em um documento financeiro.

        ##### ‚úÖ Siga os passos abaixo:

        Leia o fato relevante apresentado abaixo.
        Ele √© a base para todas as an√°lises que voc√™ ver√° a seguir.

        Responda o formul√°rio ao final da p√°gina.
        O tipo de formul√°rio exibido depender√° do formato de avalia√ß√£o que voc√™ escolheu anteriormente.

        üïí Lembre-se de sempre responder os formul√°rios no final.

        """
        )

        # Progresso Visual para o usu√°rio.
        st.progress(
            (st.session_state.fr_order + 1) / st.session_state.n_fr,
            text="Fato Relevante: {}/{}".format(
                st.session_state.fr_order + 1, st.session_state.n_fr
            ),
        )

        # Fato Relevante para o usu√°rio Visualizar
        with st.expander("Fato Relevante", expanded=True):
            st.write(
                f"""
                {fr}
            """
            )

        # Verifica se √© a avalia√ß√£o em gr√£o mais fino ou se √© o √∫ltimo caso da avalia√ß√£o de compara√ß√£o
        if st.session_state.extent or st.session_state.most_liked_analysis_defined:
            print(st.session_state.fr_model_order)
            generator_model = st.session_state.fr_model_order[0]
            generated_text = st.session_state.analises[generator_model]
            print("Modelo: {}".format(generator_model))

            # Verifica se √© o √∫ltimo modelo ou se √© a vers√£o de validar em par para reiniciar os modelos.
            if (
                st.session_state.most_liked_analysis_defined
                or st.session_state.page_order == st.session_state.n_models
            ):
                st.session_state.analises = {}
                st.session_state.fr_model_order = []

            text = (
                generated_text.replace("# ", "### ")
                .replace("## ", "### ")
                .replace("$", r"\$")
            )
            st.markdown(text)

            # Formul√°rio para avalia√ß√£o
            st.markdown("## Avalia√ß√£o")
            with st.form("avaliacao_form", clear_on_submit=False):
                st.markdown(RELEVANT_INFO["texts"]["form_extent_intro"])
                st.markdown(form_extent["question0"]["question"])

                resposta0 = st.pills(
                    "Flu√™ncia",
                    options=form_extent["question0"]["options"],
                    key="fluencia",
                    help="1 - Muito ruim, 2 - Ruim, 3 - Regular, 4 - Bom, 5 - Muito bom",
                    label_visibility="collapsed",
                )

                st.markdown(form_extent["question1"]["question"])

                resposta1 = st.pills(
                    "Coer√™ncia",
                    options=form_extent["question1"]["options"],
                    key="coerencia",
                    help="1 - Muito ruim, 2 - Ruim, 3 - Regular, 4 - Bom, 5 - Muito bom",
                    label_visibility="collapsed",
                )

                st.markdown(form_extent["question2"]["question"])
                resposta2 = st.pills(
                    "factualidade",
                    options=form_extent["question2"]["options"],
                    key="Factualidade",
                    help="1 - Muito ruim, 2 - Ruim, 3 - Regular, 4 - Bom, 5 - Muito bom",
                    label_visibility="collapsed",
                )

                st.markdown(form_extent["question3"]["question"])
                resposta3 = st.pills(
                    "aderencia",
                    options=form_extent["question3"]["options"],
                    key="Ader√™ncia",
                    help="1 - Muito ruim, 2 - Ruim, 3 - Regular, 4 - Bom, 5 - Muito bom",
                    label_visibility="collapsed",
                )

                st.markdown(form_extent["question4"]["question"])

                resposta4 = st.pills(
                    "utilidade",
                    options=form_extent["question4"]["options"],
                    key="Utilidade",
                    help="1 - Muito ruim, 2 - Ruim, 3 - Regular, 4 - Bom, 5 - Muito bom",
                    label_visibility="collapsed",
                )

                st.markdown(form_extent["comentarios0"]["question"])

                comentarios0 = st.text_area(
                    "Comentarios Finais",
                    key="comentarios",
                    label_visibility="collapsed",
                )

                enviado = st.form_submit_button("Enviar", on_click=form_callback)

                if enviado:
                    novo_dado = {
                        "id": [st.session_state.id],
                        "text": [text],
                        "material_fact": [fr],
                        "generator_model": generator_model,
                        "answer0": [resposta0],
                        "answer1": [resposta1],
                        "answer2": [resposta2],
                        "answer3": [resposta3],
                        "answer4": [resposta4],
                        "sugestions": [comentarios0],
                        "most_liked_order": [st.session_state.most_liked_order],
                    }

                    df_answer = pd.DataFrame(novo_dado)

                    # Converter para CSV em mem√≥ria
                    csv_content = util.dataframe_para_csv(df_answer)

                    try:
                        # # Salvar os dados
                        util.send_email(
                            usn=APP_SECRET_GMAIL,
                            pwd=APP_SECRET_GMAIL_PASSWORD,
                            sbj="Avalia√ß√£o LLM: {} - {}/{}".format(
                                st.session_state.id,
                                st.session_state.fr_order + 1,
                                st.session_state.n_fr,
                            ),
                            to=APP_SECRET_UFF_RECEIVER,
                            body="Avalia√ß√£o LLM: \n Gr√£o fino: {} \n Modelo Gerador: {} \n Ordem que mais gostou: {}".format(
                                st.session_state.extent,
                                generator_model,
                                st.session_state.most_liked_order,
                            ),
                            csv_content=csv_content,
                            filename="data.csv",
                            host=HOST,
                            port=PORT,
                        )
                        st.success(
                            "Respostas enviadas com sucesso! Por favor retorne ao in√≠cio da p√°gina, para ver a pr√≥xima avalia√ß√£o."
                        )
                    except Exception as e:
                        st.error(
                            f"Erro ao salvar os dados: {e}. Por favor entrar em contato com os respons√°veis pela atividade."
                        )
        else:
            # Definir as duas an√°lises por ordem da lista
            print(
                "Hora da an√°lise: {} - {}".format(
                    st.session_state.fr_model_order, st.session_state.fr_model_order[0]
                )
            )
            texto1, texto2 = select_texts(
                st.session_state.analises, st.session_state.fr_model_order
            )

            # Preparar textos e definir as colunas
            col1, col2 = st.columns(2)

            with col1:
                st.header("An√°lise A")
                texto1 = (
                    texto1.replace("# ", "### ")
                    .replace("## ", "### ")
                    .replace("$", r"\$")
                )
                print(
                    "{} - {}".format(
                        st.session_state.fr_model_order,
                        st.session_state.fr_model_order[0],
                    )
                )
                st.markdown(texto1)

            with col2:
                st.header("An√°lise B")
                texto2 = (
                    texto2.replace("# ", "### ")
                    .replace("## ", "### ")
                    .replace("$", r"\$")
                )
                print(
                    "{} - {}".format(
                        st.session_state.fr_model_order,
                        st.session_state.fr_model_order[1],
                    )
                )
                st.markdown(texto2)

            # Formul√°rio para avalia√ß√£o
            st.markdown("## Avalia√ß√£o")
            with st.form("form_most_liked", clear_on_submit=True):
                st.markdown("#### Qual an√°lise voc√™ mais gostou? (Selecione uma op√ß√£o)")
                resposta0 = st.pills(
                    "Selecione uma op√ß√£o",
                    options=["An√°lise A", "An√°lise B"],
                    key="most_liked",
                    label_visibility="collapsed",
                )
                enviado = st.form_submit_button("Enviar", on_click=form_callback)


def main():
    # Configura√ß√£o do Streamlit
    set_page_config()

    # Carregar dados
    load_data()

    # Execu√ß√£o do aplicativo
    show_interface()


if __name__ == "__main__":
    main()
